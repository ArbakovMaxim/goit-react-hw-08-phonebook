{"version":3,"file":"static/js/164.37fc6c5e.chunk.js","mappings":"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","sources":["components/ContactsForm/ContactsForm.styled.js","components/ContactsForm/ContactsForm.jsx","components/ContactsList/ContactList.styled.js","components/ContactsList/ContactList.jsx","components/Modal/Modal.styled.js","components/Modal/Modal.jsx","Pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Field, ErrorMessage } from 'formik';\n\nexport const ButtonSubmit = styled.button`\n  display: block;\n  margin-top: 20px;\n`;\n\nexport const TitleBlock = styled.h2`\n  margin: 0;\n  margin-bottom: 5px;\n  font-size: ${p => p.theme.fontsSizes[3]}px;\n`;\n\nexport const WrapperForm = styled.div`\n  border: 1px solid black;\n  padding: 32px;\n  width: 300px;\n`;\n\nexport const Input = styled(Field)`\n  margin-bottom: 20px;\n`;\n\nexport const Eror = styled(ErrorMessage)`\n  color: ${p => p.theme.colors.red};\n  font-size: ${p => p.theme.fontsSizes[0]}px;\n  width: 180px;\n`;\n","import * as yup from 'yup';\nimport { toast } from 'react-toastify';\nimport { Form, Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport {\n  ButtonSubmit,\n  TitleBlock,\n  WrapperForm,\n  Input,\n  Eror,\n} from './ContactsForm.styled';\nimport { contactsOperations } from 'redux/contacts';\n\nexport const ContactsForm = ({ onSave }) => {\n  const dispatch = useDispatch();\n  const hendleSubmit = (values, { resetForm }) => {\n    /*   if (data.some(contact => contact.name === values.name)) {\n      toast(`${values.name} is already in contacts`);\n    } else { */\n    if (values) {\n      dispatch(contactsOperations.addContact(values));\n      onSave();\n      toast(`${values.name} added to contact`);\n      return;\n    }\n    resetForm();\n  };\n\n  const nameValid =\n    \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\";\n  const numberValid =\n    /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\n\n  let schema = yup.object().shape({\n    name: yup\n      .string()\n      .matches(\n        nameValid,\n        'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore dArtagnan'\n      )\n      .required(),\n    number: yup\n      .string()\n      .matches(\n        numberValid,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required(),\n  });\n\n  return (\n    <WrapperForm>\n      <Formik\n        initialValues={{ name: '', number: '' }}\n        validationSchema={schema}\n        onSubmit={hendleSubmit}\n      >\n        <Form>\n          <TitleBlock>Name</TitleBlock>\n          <Input type=\"text\" name=\"name\" />\n          <Eror name=\"name\" component=\"div\" />\n          <TitleBlock>Number</TitleBlock>\n          <Input type=\"tel\" name=\"number\" />\n          <Eror name=\"number\" component=\"div\" />\n          <ButtonSubmit type=\"submit\">Add contact</ButtonSubmit>\n        </Form>\n      </Formik>\n    </WrapperForm>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContWrapper = styled.div``;\n\nexport const ContList = styled.ul``;\n\nexport const ContItem = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const BtnDeleteContact = styled.button`\n  margin-left: 10px;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\n//import { toast } from 'react-toastify';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\n\nimport {\n  ContWrapper,\n  ContList,\n  ContItem,\n  BtnDeleteContact,\n} from './ContactList.styled';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contactsList = useSelector(contactsSelectors.getVisibleContacts);\n\n  const onDeleteContact = id => dispatch(contactsOperations.deleteContact(id));\n\n  //   const onToggleCompleted = id =>\n  //     dispatch(contactsOperations.toggleCompleted(id));\n\n  return (\n    <ContWrapper>\n      {contactsList.length === 0 ? (\n        <p>не чего нет</p>\n      ) : (\n        <ContList>\n          {contactsList.map(contacts => {\n            return (\n              <ContItem key={contacts.id}>\n                {contacts.name}: {contacts.phone}\n                <BtnDeleteContact\n                  type=\"button\"\n                  onClick={() => {\n                    onDeleteContact(contacts.id, contacts.name);\n                  }}\n                >\n                  Delete\n                </BtnDeleteContact>\n              </ContItem>\n            );\n          })}\n        </ContList>\n      )}\n    </ContWrapper>\n  );\n};\n\nexport default ContactsList;\n","import styled from 'styled-components';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n`;\n\nexport const Content = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  max-width: 600px;\n  width: 100%;\n  padding: 12px;\n  background-color: #fff;\n  border-radius: 3px;\n  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n`;\n","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Backdrop, Content } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal = ({ onClose, children }) => {\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Escape') onClose();\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClose]);\n\n  const handleBackdropClick = event => {\n    if (event.currentTarget === event.target) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <Backdrop onClick={handleBackdropClick}>\n      <Content>{children}</Content>\n    </Backdrop>,\n    modalRoot\n  );\n};\n\nexport default Modal;\n","import { ContactsForm } from 'components/ContactsForm/ContactsForm';\nimport ContactsList from 'components/ContactsList/ContactList';\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Modal from '../../components/Modal/Modal';\n//import { HiPlus } from 'react-icons/hi';\n//import TodoEditor from '../components/TodoEditor';\n//import Filter from '../components/TodoFilter';\n//import Stats from '../components/Stats';\n//import IconButton from '../components/IconButton';\nimport {\n  contactsOperations,\n  contactsSelectors,\n} from '../../redux/contacts/index';\n\nconst barStyles = {\n  display: 'flex',\n  alignItems: 'flex-end',\n  marginBottom: 20,\n};\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoadingContacts = useSelector(contactsSelectors.getLoading);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const toggleModal = () => setIsModalOpen(state => !state);\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <div style={barStyles}>{isLoadingContacts && <h1>Загружаем...</h1>}</div>\n      <ContactsList />\n      <button onClick={toggleModal} aria-label=\"New contact\">\n        {' '}\n        add contact\n      </button>\n      {isModalOpen && (\n        <Modal onClose={toggleModal}>\n          <ContactsForm onSave={toggleModal} />\n        </Modal>\n      )}\n    </>\n  );\n}\n"],"names":["ButtonSubmit","styled","TitleBlock","p","theme","fontsSizes","WrapperForm","Input","Field","Eror","ErrorMessage","colors","red","ContactsForm","onSave","dispatch","useDispatch","schema","yup","shape","name","matches","required","number","initialValues","validationSchema","onSubmit","values","resetForm","contactsOperations","toast","type","component","ContWrapper","ContList","ContItem","BtnDeleteContact","contactsList","useSelector","contactsSelectors","onDeleteContact","id","length","map","contacts","phone","onClick","Backdrop","Content","modalRoot","document","querySelector","onClose","children","useEffect","handleKeyDown","e","code","window","addEventListener","removeEventListener","createPortal","event","currentTarget","target","barStyles","display","alignItems","marginBottom","Contacts","isLoadingContacts","useState","isModalOpen","setIsModalOpen","toggleModal","state","style"],"sourceRoot":""}